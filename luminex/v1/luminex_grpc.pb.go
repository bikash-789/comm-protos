// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: luminex/v1/luminex.proto

package v1

import (
	context "context"
	request "github.com/bikash-789/comm-protos/luminex/v1/request"
	response "github.com/bikash-789/comm-protos/luminex/v1/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Luminex_GetHealth_FullMethodName           = "/luminex.v1.luminex/GetHealth"
	Luminex_GetPRMetrics_FullMethodName        = "/luminex.v1.luminex/GetPRMetrics"
	Luminex_GetMonthlyStats_FullMethodName     = "/luminex.v1.luminex/GetMonthlyStats"
	Luminex_GetRepoStats_FullMethodName        = "/luminex.v1.luminex/GetRepoStats"
	Luminex_GetContributorStats_FullMethodName = "/luminex.v1.luminex/GetContributorStats"
	Luminex_GetIssueStats_FullMethodName       = "/luminex.v1.luminex/GetIssueStats"
	Luminex_GetDetailedPRStats_FullMethodName  = "/luminex.v1.luminex/GetDetailedPRStats"
)

// LuminexClient is the client API for Luminex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LuminexClient interface {
	GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*response.HealthResponse, error)
	GetPRMetrics(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.PRMetricsResponse, error)
	GetMonthlyStats(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.MonthlyStatsResponse, error)
	GetRepoStats(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.RepoStatsResponse, error)
	GetContributorStats(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.ContributorStatsResponse, error)
	GetIssueStats(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.IssueStatsResponse, error)
	GetDetailedPRStats(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.DetailedPRStatsResponse, error)
}

type luminexClient struct {
	cc grpc.ClientConnInterface
}

func NewLuminexClient(cc grpc.ClientConnInterface) LuminexClient {
	return &luminexClient{cc}
}

func (c *luminexClient) GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*response.HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.HealthResponse)
	err := c.cc.Invoke(ctx, Luminex_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luminexClient) GetPRMetrics(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.PRMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.PRMetricsResponse)
	err := c.cc.Invoke(ctx, Luminex_GetPRMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luminexClient) GetMonthlyStats(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.MonthlyStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.MonthlyStatsResponse)
	err := c.cc.Invoke(ctx, Luminex_GetMonthlyStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luminexClient) GetRepoStats(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.RepoStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.RepoStatsResponse)
	err := c.cc.Invoke(ctx, Luminex_GetRepoStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luminexClient) GetContributorStats(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.ContributorStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.ContributorStatsResponse)
	err := c.cc.Invoke(ctx, Luminex_GetContributorStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luminexClient) GetIssueStats(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.IssueStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.IssueStatsResponse)
	err := c.cc.Invoke(ctx, Luminex_GetIssueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luminexClient) GetDetailedPRStats(ctx context.Context, in *request.RepositoryRequest, opts ...grpc.CallOption) (*response.DetailedPRStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.DetailedPRStatsResponse)
	err := c.cc.Invoke(ctx, Luminex_GetDetailedPRStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LuminexServer is the server API for Luminex service.
// All implementations must embed UnimplementedLuminexServer
// for forward compatibility.
type LuminexServer interface {
	GetHealth(context.Context, *emptypb.Empty) (*response.HealthResponse, error)
	GetPRMetrics(context.Context, *request.RepositoryRequest) (*response.PRMetricsResponse, error)
	GetMonthlyStats(context.Context, *request.RepositoryRequest) (*response.MonthlyStatsResponse, error)
	GetRepoStats(context.Context, *request.RepositoryRequest) (*response.RepoStatsResponse, error)
	GetContributorStats(context.Context, *request.RepositoryRequest) (*response.ContributorStatsResponse, error)
	GetIssueStats(context.Context, *request.RepositoryRequest) (*response.IssueStatsResponse, error)
	GetDetailedPRStats(context.Context, *request.RepositoryRequest) (*response.DetailedPRStatsResponse, error)
	mustEmbedUnimplementedLuminexServer()
}

// UnimplementedLuminexServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLuminexServer struct{}

func (UnimplementedLuminexServer) GetHealth(context.Context, *emptypb.Empty) (*response.HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedLuminexServer) GetPRMetrics(context.Context, *request.RepositoryRequest) (*response.PRMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPRMetrics not implemented")
}
func (UnimplementedLuminexServer) GetMonthlyStats(context.Context, *request.RepositoryRequest) (*response.MonthlyStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyStats not implemented")
}
func (UnimplementedLuminexServer) GetRepoStats(context.Context, *request.RepositoryRequest) (*response.RepoStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoStats not implemented")
}
func (UnimplementedLuminexServer) GetContributorStats(context.Context, *request.RepositoryRequest) (*response.ContributorStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContributorStats not implemented")
}
func (UnimplementedLuminexServer) GetIssueStats(context.Context, *request.RepositoryRequest) (*response.IssueStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueStats not implemented")
}
func (UnimplementedLuminexServer) GetDetailedPRStats(context.Context, *request.RepositoryRequest) (*response.DetailedPRStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailedPRStats not implemented")
}
func (UnimplementedLuminexServer) mustEmbedUnimplementedLuminexServer() {}
func (UnimplementedLuminexServer) testEmbeddedByValue()                 {}

// UnsafeLuminexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LuminexServer will
// result in compilation errors.
type UnsafeLuminexServer interface {
	mustEmbedUnimplementedLuminexServer()
}

func RegisterLuminexServer(s grpc.ServiceRegistrar, srv LuminexServer) {
	// If the following call pancis, it indicates UnimplementedLuminexServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Luminex_ServiceDesc, srv)
}

func _Luminex_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuminexServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Luminex_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuminexServer).GetHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Luminex_GetPRMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuminexServer).GetPRMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Luminex_GetPRMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuminexServer).GetPRMetrics(ctx, req.(*request.RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Luminex_GetMonthlyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuminexServer).GetMonthlyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Luminex_GetMonthlyStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuminexServer).GetMonthlyStats(ctx, req.(*request.RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Luminex_GetRepoStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuminexServer).GetRepoStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Luminex_GetRepoStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuminexServer).GetRepoStats(ctx, req.(*request.RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Luminex_GetContributorStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuminexServer).GetContributorStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Luminex_GetContributorStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuminexServer).GetContributorStats(ctx, req.(*request.RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Luminex_GetIssueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuminexServer).GetIssueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Luminex_GetIssueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuminexServer).GetIssueStats(ctx, req.(*request.RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Luminex_GetDetailedPRStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuminexServer).GetDetailedPRStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Luminex_GetDetailedPRStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuminexServer).GetDetailedPRStats(ctx, req.(*request.RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Luminex_ServiceDesc is the grpc.ServiceDesc for Luminex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Luminex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "luminex.v1.luminex",
	HandlerType: (*LuminexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _Luminex_GetHealth_Handler,
		},
		{
			MethodName: "GetPRMetrics",
			Handler:    _Luminex_GetPRMetrics_Handler,
		},
		{
			MethodName: "GetMonthlyStats",
			Handler:    _Luminex_GetMonthlyStats_Handler,
		},
		{
			MethodName: "GetRepoStats",
			Handler:    _Luminex_GetRepoStats_Handler,
		},
		{
			MethodName: "GetContributorStats",
			Handler:    _Luminex_GetContributorStats_Handler,
		},
		{
			MethodName: "GetIssueStats",
			Handler:    _Luminex_GetIssueStats_Handler,
		},
		{
			MethodName: "GetDetailedPRStats",
			Handler:    _Luminex_GetDetailedPRStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "luminex/v1/luminex.proto",
}
