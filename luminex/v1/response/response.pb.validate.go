// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: luminex/v1/response/response.proto

package response

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HealthResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthResponseMultiError,
// or nil if none found.
func (m *HealthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return HealthResponseMultiError(errors)
	}

	return nil
}

// HealthResponseMultiError is an error wrapping multiple validation errors
// returned by HealthResponse.ValidateAll() if the designated constraints
// aren't met.
type HealthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthResponseMultiError) AllErrors() []error { return m }

// HealthResponseValidationError is the validation error returned by
// HealthResponse.Validate if the designated constraints aren't met.
type HealthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthResponseValidationError) ErrorName() string { return "HealthResponseValidationError" }

// Error satisfies the builtin error interface
func (e HealthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthResponseValidationError{}

// Validate checks the field values on PRMetricsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PRMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PRMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PRMetricsResponseMultiError, or nil if none found.
func (m *PRMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PRMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvgMergeTime

	// no validation rules for OpenPrs

	// no validation rules for MergedLast_7

	if len(errors) > 0 {
		return PRMetricsResponseMultiError(errors)
	}

	return nil
}

// PRMetricsResponseMultiError is an error wrapping multiple validation errors
// returned by PRMetricsResponse.ValidateAll() if the designated constraints
// aren't met.
type PRMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PRMetricsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PRMetricsResponseMultiError) AllErrors() []error { return m }

// PRMetricsResponseValidationError is the validation error returned by
// PRMetricsResponse.Validate if the designated constraints aren't met.
type PRMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PRMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PRMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PRMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PRMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PRMetricsResponseValidationError) ErrorName() string {
	return "PRMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PRMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPRMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PRMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PRMetricsResponseValidationError{}

// Validate checks the field values on MonthData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonthData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonthData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonthDataMultiError, or nil
// if none found.
func (m *MonthData) ValidateAll() error {
	return m.validate(true)
}

func (m *MonthData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Month

	// no validation rules for OpenPrs

	// no validation rules for MergedPrs

	// no validation rules for Issues

	if len(errors) > 0 {
		return MonthDataMultiError(errors)
	}

	return nil
}

// MonthDataMultiError is an error wrapping multiple validation errors returned
// by MonthData.ValidateAll() if the designated constraints aren't met.
type MonthDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonthDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonthDataMultiError) AllErrors() []error { return m }

// MonthDataValidationError is the validation error returned by
// MonthData.Validate if the designated constraints aren't met.
type MonthDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonthDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonthDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonthDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonthDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonthDataValidationError) ErrorName() string { return "MonthDataValidationError" }

// Error satisfies the builtin error interface
func (e MonthDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonthData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonthDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonthDataValidationError{}

// Validate checks the field values on MonthlyStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MonthlyStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonthlyStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MonthlyStatsResponseMultiError, or nil if none found.
func (m *MonthlyStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MonthlyStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MonthlyStatsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MonthlyStatsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MonthlyStatsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MonthlyStatsResponseMultiError(errors)
	}

	return nil
}

// MonthlyStatsResponseMultiError is an error wrapping multiple validation
// errors returned by MonthlyStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type MonthlyStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonthlyStatsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonthlyStatsResponseMultiError) AllErrors() []error { return m }

// MonthlyStatsResponseValidationError is the validation error returned by
// MonthlyStatsResponse.Validate if the designated constraints aren't met.
type MonthlyStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonthlyStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonthlyStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonthlyStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonthlyStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonthlyStatsResponseValidationError) ErrorName() string {
	return "MonthlyStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MonthlyStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonthlyStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonthlyStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonthlyStatsResponseValidationError{}

// Validate checks the field values on RepoStatsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RepoStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepoStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepoStatsResponseMultiError, or nil if none found.
func (m *RepoStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RepoStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Stars

	// no validation rules for Forks

	// no validation rules for Watchers

	// no validation rules for SizeKb

	// no validation rules for LastUpdated

	// no validation rules for Language

	if len(errors) > 0 {
		return RepoStatsResponseMultiError(errors)
	}

	return nil
}

// RepoStatsResponseMultiError is an error wrapping multiple validation errors
// returned by RepoStatsResponse.ValidateAll() if the designated constraints
// aren't met.
type RepoStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepoStatsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepoStatsResponseMultiError) AllErrors() []error { return m }

// RepoStatsResponseValidationError is the validation error returned by
// RepoStatsResponse.Validate if the designated constraints aren't met.
type RepoStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepoStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepoStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepoStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepoStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepoStatsResponseValidationError) ErrorName() string {
	return "RepoStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RepoStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepoStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepoStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepoStatsResponseValidationError{}

// Validate checks the field values on ContributorData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContributorData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContributorData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContributorDataMultiError, or nil if none found.
func (m *ContributorData) ValidateAll() error {
	return m.validate(true)
}

func (m *ContributorData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Contributions

	// no validation rules for AvatarUrl

	if len(errors) > 0 {
		return ContributorDataMultiError(errors)
	}

	return nil
}

// ContributorDataMultiError is an error wrapping multiple validation errors
// returned by ContributorData.ValidateAll() if the designated constraints
// aren't met.
type ContributorDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContributorDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContributorDataMultiError) AllErrors() []error { return m }

// ContributorDataValidationError is the validation error returned by
// ContributorData.Validate if the designated constraints aren't met.
type ContributorDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContributorDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContributorDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContributorDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContributorDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContributorDataValidationError) ErrorName() string { return "ContributorDataValidationError" }

// Error satisfies the builtin error interface
func (e ContributorDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContributorData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContributorDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContributorDataValidationError{}

// Validate checks the field values on ContributorStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContributorStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContributorStatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContributorStatsResponseMultiError, or nil if none found.
func (m *ContributorStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContributorStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalContributors

	for idx, item := range m.GetTopContributors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContributorStatsResponseValidationError{
						field:  fmt.Sprintf("TopContributors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContributorStatsResponseValidationError{
						field:  fmt.Sprintf("TopContributors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContributorStatsResponseValidationError{
					field:  fmt.Sprintf("TopContributors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CommitsLast_30Days

	// no validation rules for AvgCommitsPerDay

	if len(errors) > 0 {
		return ContributorStatsResponseMultiError(errors)
	}

	return nil
}

// ContributorStatsResponseMultiError is an error wrapping multiple validation
// errors returned by ContributorStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ContributorStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContributorStatsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContributorStatsResponseMultiError) AllErrors() []error { return m }

// ContributorStatsResponseValidationError is the validation error returned by
// ContributorStatsResponse.Validate if the designated constraints aren't met.
type ContributorStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContributorStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContributorStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContributorStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContributorStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContributorStatsResponseValidationError) ErrorName() string {
	return "ContributorStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContributorStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContributorStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContributorStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContributorStatsResponseValidationError{}

// Validate checks the field values on IssueStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueStatsResponseMultiError, or nil if none found.
func (m *IssueStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OpenIssues

	// no validation rules for ClosedIssues

	// no validation rules for AvgResolutionTime

	// no validation rules for OldestOpenIssue

	// no validation rules for IssuesLast_30Days

	if len(errors) > 0 {
		return IssueStatsResponseMultiError(errors)
	}

	return nil
}

// IssueStatsResponseMultiError is an error wrapping multiple validation errors
// returned by IssueStatsResponse.ValidateAll() if the designated constraints
// aren't met.
type IssueStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueStatsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueStatsResponseMultiError) AllErrors() []error { return m }

// IssueStatsResponseValidationError is the validation error returned by
// IssueStatsResponse.Validate if the designated constraints aren't met.
type IssueStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueStatsResponseValidationError) ErrorName() string {
	return "IssueStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IssueStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueStatsResponseValidationError{}

// Validate checks the field values on DetailedPRStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetailedPRStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetailedPRStatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetailedPRStatsResponseMultiError, or nil if none found.
func (m *DetailedPRStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DetailedPRStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvgMergeTime

	// no validation rules for OpenPrs

	// no validation rules for MergedLast_7

	// no validation rules for SmallPrs

	// no validation rules for MediumPrs

	// no validation rules for LargePrs

	// no validation rules for AvgComments

	// no validation rules for PrsWithoutReview

	if len(errors) > 0 {
		return DetailedPRStatsResponseMultiError(errors)
	}

	return nil
}

// DetailedPRStatsResponseMultiError is an error wrapping multiple validation
// errors returned by DetailedPRStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type DetailedPRStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailedPRStatsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailedPRStatsResponseMultiError) AllErrors() []error { return m }

// DetailedPRStatsResponseValidationError is the validation error returned by
// DetailedPRStatsResponse.Validate if the designated constraints aren't met.
type DetailedPRStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailedPRStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailedPRStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailedPRStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailedPRStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailedPRStatsResponseValidationError) ErrorName() string {
	return "DetailedPRStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DetailedPRStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailedPRStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailedPRStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailedPRStatsResponseValidationError{}
