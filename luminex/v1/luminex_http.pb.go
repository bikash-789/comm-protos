// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.20.3
// source: luminex/v1/luminex.proto

package v1

import (
	context "context"
	request "github.com/bikash-789/comm-protos/luminex/v1/request"
	response "github.com/bikash-789/comm-protos/luminex/v1/response"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLuminexGetContributorStats = "/luminex.v1.luminex/GetContributorStats"
const OperationLuminexGetDetailedPRStats = "/luminex.v1.luminex/GetDetailedPRStats"
const OperationLuminexGetHealth = "/luminex.v1.luminex/GetHealth"
const OperationLuminexGetIssueStats = "/luminex.v1.luminex/GetIssueStats"
const OperationLuminexGetMonthlyStats = "/luminex.v1.luminex/GetMonthlyStats"
const OperationLuminexGetPRMetrics = "/luminex.v1.luminex/GetPRMetrics"
const OperationLuminexGetRepoStats = "/luminex.v1.luminex/GetRepoStats"

type LuminexHTTPServer interface {
	GetContributorStats(context.Context, *request.RepositoryRequest) (*response.ContributorStatsResponse, error)
	GetDetailedPRStats(context.Context, *request.RepositoryRequest) (*response.DetailedPRStatsResponse, error)
	GetHealth(context.Context, *emptypb.Empty) (*response.HealthResponse, error)
	GetIssueStats(context.Context, *request.RepositoryRequest) (*response.IssueStatsResponse, error)
	GetMonthlyStats(context.Context, *request.RepositoryRequest) (*response.MonthlyStatsResponse, error)
	GetPRMetrics(context.Context, *request.RepositoryRequest) (*response.PRMetricsResponse, error)
	GetRepoStats(context.Context, *request.RepositoryRequest) (*response.RepoStatsResponse, error)
}

func RegisterLuminexHTTPServer(s *http.Server, srv LuminexHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/health", _Luminex_GetHealth0_HTTP_Handler(srv))
	r.GET("/v1/gh/pr-metrics", _Luminex_GetPRMetrics0_HTTP_Handler(srv))
	r.GET("/v1/gh/monthly-stats", _Luminex_GetMonthlyStats0_HTTP_Handler(srv))
	r.GET("/v1/gh/repo-stats", _Luminex_GetRepoStats0_HTTP_Handler(srv))
	r.GET("/v1/gh/contributor-stats", _Luminex_GetContributorStats0_HTTP_Handler(srv))
	r.GET("/v1/gh/issue-stats", _Luminex_GetIssueStats0_HTTP_Handler(srv))
	r.GET("/v1/gh/detailed-pr-stats", _Luminex_GetDetailedPRStats0_HTTP_Handler(srv))
}

func _Luminex_GetHealth0_HTTP_Handler(srv LuminexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLuminexGetHealth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHealth(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*response.HealthResponse)
		return ctx.Result(200, reply)
	}
}

func _Luminex_GetPRMetrics0_HTTP_Handler(srv LuminexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in request.RepositoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLuminexGetPRMetrics)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPRMetrics(ctx, req.(*request.RepositoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*response.PRMetricsResponse)
		return ctx.Result(200, reply)
	}
}

func _Luminex_GetMonthlyStats0_HTTP_Handler(srv LuminexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in request.RepositoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLuminexGetMonthlyStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMonthlyStats(ctx, req.(*request.RepositoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*response.MonthlyStatsResponse)
		return ctx.Result(200, reply)
	}
}

func _Luminex_GetRepoStats0_HTTP_Handler(srv LuminexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in request.RepositoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLuminexGetRepoStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRepoStats(ctx, req.(*request.RepositoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*response.RepoStatsResponse)
		return ctx.Result(200, reply)
	}
}

func _Luminex_GetContributorStats0_HTTP_Handler(srv LuminexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in request.RepositoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLuminexGetContributorStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetContributorStats(ctx, req.(*request.RepositoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*response.ContributorStatsResponse)
		return ctx.Result(200, reply)
	}
}

func _Luminex_GetIssueStats0_HTTP_Handler(srv LuminexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in request.RepositoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLuminexGetIssueStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetIssueStats(ctx, req.(*request.RepositoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*response.IssueStatsResponse)
		return ctx.Result(200, reply)
	}
}

func _Luminex_GetDetailedPRStats0_HTTP_Handler(srv LuminexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in request.RepositoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLuminexGetDetailedPRStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDetailedPRStats(ctx, req.(*request.RepositoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*response.DetailedPRStatsResponse)
		return ctx.Result(200, reply)
	}
}

type LuminexHTTPClient interface {
	GetContributorStats(ctx context.Context, req *request.RepositoryRequest, opts ...http.CallOption) (rsp *response.ContributorStatsResponse, err error)
	GetDetailedPRStats(ctx context.Context, req *request.RepositoryRequest, opts ...http.CallOption) (rsp *response.DetailedPRStatsResponse, err error)
	GetHealth(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *response.HealthResponse, err error)
	GetIssueStats(ctx context.Context, req *request.RepositoryRequest, opts ...http.CallOption) (rsp *response.IssueStatsResponse, err error)
	GetMonthlyStats(ctx context.Context, req *request.RepositoryRequest, opts ...http.CallOption) (rsp *response.MonthlyStatsResponse, err error)
	GetPRMetrics(ctx context.Context, req *request.RepositoryRequest, opts ...http.CallOption) (rsp *response.PRMetricsResponse, err error)
	GetRepoStats(ctx context.Context, req *request.RepositoryRequest, opts ...http.CallOption) (rsp *response.RepoStatsResponse, err error)
}

type LuminexHTTPClientImpl struct {
	cc *http.Client
}

func NewLuminexHTTPClient(client *http.Client) LuminexHTTPClient {
	return &LuminexHTTPClientImpl{client}
}

func (c *LuminexHTTPClientImpl) GetContributorStats(ctx context.Context, in *request.RepositoryRequest, opts ...http.CallOption) (*response.ContributorStatsResponse, error) {
	var out response.ContributorStatsResponse
	pattern := "/v1/gh/contributor-stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLuminexGetContributorStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LuminexHTTPClientImpl) GetDetailedPRStats(ctx context.Context, in *request.RepositoryRequest, opts ...http.CallOption) (*response.DetailedPRStatsResponse, error) {
	var out response.DetailedPRStatsResponse
	pattern := "/v1/gh/detailed-pr-stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLuminexGetDetailedPRStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LuminexHTTPClientImpl) GetHealth(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*response.HealthResponse, error) {
	var out response.HealthResponse
	pattern := "/v1/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLuminexGetHealth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LuminexHTTPClientImpl) GetIssueStats(ctx context.Context, in *request.RepositoryRequest, opts ...http.CallOption) (*response.IssueStatsResponse, error) {
	var out response.IssueStatsResponse
	pattern := "/v1/gh/issue-stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLuminexGetIssueStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LuminexHTTPClientImpl) GetMonthlyStats(ctx context.Context, in *request.RepositoryRequest, opts ...http.CallOption) (*response.MonthlyStatsResponse, error) {
	var out response.MonthlyStatsResponse
	pattern := "/v1/gh/monthly-stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLuminexGetMonthlyStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LuminexHTTPClientImpl) GetPRMetrics(ctx context.Context, in *request.RepositoryRequest, opts ...http.CallOption) (*response.PRMetricsResponse, error) {
	var out response.PRMetricsResponse
	pattern := "/v1/gh/pr-metrics"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLuminexGetPRMetrics))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LuminexHTTPClientImpl) GetRepoStats(ctx context.Context, in *request.RepositoryRequest, opts ...http.CallOption) (*response.RepoStatsResponse, error) {
	var out response.RepoStatsResponse
	pattern := "/v1/gh/repo-stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLuminexGetRepoStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
